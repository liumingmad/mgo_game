name: Build and Deploy to Alibaba Cloud

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  # 阿里云容器镜像服务配置
  # REGISTRY: registry.cn-hangzhou.aliyuncs.com
  REGISTRY: crpi-rnj5shn1s8desszs.cn-heyuan.personal.cr.aliyuncs.com
  NAMESPACE: mingmad  # 请替换为你的命名空间
  IMAGE_NAME: mgo-game-server

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Alibaba Cloud Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
        password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
    
    - name: Output image digest
      if: github.event_name != 'pull_request'
      run: echo ${{ steps.build.outputs.digest }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # 设置镜像信息
          IMAGE_URL="${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:latest"
          CONTAINER_NAME="mgo-game-server"
          
          echo "开始部署镜像: $IMAGE_URL"
          
          # 登录阿里云镜像仓库
          echo "登录阿里云镜像仓库..."
          echo ${{ secrets.ALIYUN_REGISTRY_PASSWORD }} | docker login --username ${{ secrets.ALIYUN_REGISTRY_USERNAME }} --password-stdin ${{ env.REGISTRY }}
          
          # 拉取最新镜像
          echo "拉取最新镜像..."
          docker pull $IMAGE_URL
          
          # 停止并删除旧容器（如果存在）
          echo "停止并删除旧容器..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true
          
          # 启动新容器
          echo "启动新容器..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 8003:8003 \
            -e MYSQL_HOST="${{ secrets.MYSQL_HOST || 'localhost' }}" \
            -e MYSQL_PORT="${{ secrets.MYSQL_PORT || '3306' }}" \
            -e MYSQL_USERNAME="${{ secrets.MYSQL_USERNAME || 'root' }}" \
            -e MYSQL_PASSWORD="${{ secrets.MYSQL_PASSWORD }}" \
            -e MYSQL_DATABASE="${{ secrets.MYSQL_DATABASE || 'mgo_game' }}" \
            -e REDIS_HOST="${{ secrets.REDIS_HOST || 'localhost' }}" \
            -e REDIS_PORT="${{ secrets.REDIS_PORT || '6379' }}" \
            -e REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD || '' }}" \
            $IMAGE_URL
          
          # 清理无用的镜像
          echo "清理无用的镜像..."
          docker image prune -f
          
          # 检查容器状态
          echo "检查容器状态..."
          docker ps | grep $CONTAINER_NAME
          
          # 显示容器日志（最近10行）
          echo "容器启动日志:"
          docker logs --tail 10 $CONTAINER_NAME
          
          echo "部署完成！"